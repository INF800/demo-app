name: Build and Deploy to Dokku

on:
  push:
    branches: [main, staging] # [test/deploy]  # [main, dev]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2


    - name: Get base app name from settings.ini and set $APP_NAME env variable based on branch name
      shell: bash
      run: |
        BASE_APP_NAME=$(python -c "exec(\"import configparser; config = configparser.ConfigParser(); config.read('settings.ini'); print(config.get('DEFAULT', 'repo'))\")")
        if [ "${{ github.head_ref || github.ref_name }}" = "main" ]; then
          APP_NAME=$BASE_APP_NAME
        else
          APP_NAME=$BASE_APP_NAME-${{ github.head_ref || github.ref_name }}
        fi
        echo "APP_NAME=$APP_NAME"
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: my-image/${{ env.APP_NAME }}:${{ github.sha }}

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DOKKU_SSH_PRIVATE_KEY }}

    - name: Save and load Docker image on Dokku server
      run: |
        docker image save my-image/${{ env.APP_NAME }}:${{ github.sha }} | ssh -o StrictHostKeyChecking=no root@${{ secrets.DOKKU_SERVER_HOST }} "docker load"
      shell: bash

    - name: Check if app exists and create if not
      run: |
        if ! ssh dokku@${{ secrets.DOKKU_SERVER_HOST }} apps:exists $APP_NAME; then
          ssh dokku@${{ secrets.DOKKU_SERVER_HOST }} apps:create $APP_NAME
          ssh dokku@${{ secrets.DOKKU_SERVER_HOST }} letsencrypt:enable $APP_NAME
        fi
      shell: bash

    - name: Deploy or Rebuild Docker image on Dokku
      run: |
        set +e
        DEPLOY_OUTPUT=$(ssh dokku@${{ secrets.DOKKU_SERVER_HOST }} git:from-image $APP_NAME my-image/${{ env.APP_NAME }}:${{ github.sha }} 2>&1)
        EXIT_CODE=$?
        echo "$DEPLOY_OUTPUT"

        if [ $EXIT_CODE -eq 0 ]; then
          echo "Successfully deployed Docker image."
        else
          if [[ "$DEPLOY_OUTPUT" == *"No changes detected, skipping git commit"* ]]; then
            echo "Rebuilding app due to 'No changes detected, skipping git commit'."
            ssh dokku@${{ secrets.DOKKU_SERVER_HOST }} ps:rebuild $APP_NAME
          else
            echo "Deployment failed with exit code $EXIT_CODE."
            exit $EXIT_CODE
          fi
        fi
      shell: bash
